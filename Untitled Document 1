# -*- coding: utf-8 -*-
"""
Created on Sun Sep 13 14:14:23 2020

@author: anmol
"""

import dash
import dash_bootstrap_components as dbc
import dash_html_components as html
import requests
import pandas as pd
import dash_core_components as dcc
import plotly.express as px
import numpy as np
from dash.dependencies import Input,Output
import dash_table
import plotly.graph_objects as go
import plotly.express as px

from plotly.offline import init_notebook_mode,  plot
init_notebook_mode()

app = dash.Dash(external_stylesheets = [ dbc.themes.FLATLY],)



data1=pd.read_csv("/home/varun/ipl_dash_bord/IPL Matches 2008-2020.csv")



data1["key"]=1
data1['date'] = pd.to_datetime(data1['date'])

data1['year'] = data1['date'].dt.year

data1['month'] = data1['date'].dt.month

data1['day'] = data1['date'].dt.day

data2=pd.read_csv("/home/varun/ipl_dash_bord/IPL Ball-by-Ball 2008-2020.csv")
sec_data = pd.merge(data1,data2, on='id')

ccc=sec_data.copy()

#maximum match vanue
df1=data1.groupby("venue").count().reset_index()
df1=df1[["venue","key"]].sort_values(by=['key'], ascending=False)
df1=df1.head(8)

#if you won the toss then how much chance to win the match
xx = data1.shape
xx=xx[0]
count=0
for i in range(xx):
    if data1["toss_winner"][i]==data1["winner"][i]:
        count=count+1
win=(count*100)//xx
lose=100-win

ipl_logo = "https://images.plot.ly/logo/new-branding/plotly-logomark.png"




navbar = dbc.Navbar( id = 'navbar', children = [


    html.A(
    dbc.Row([
        dbc.Col(html.Img(src = ipl_logo, height = "50px")),
        dbc.Col(
            dbc.NavbarBrand("IPL dashboard 2012-2020", style = {'color':'black', 'fontSize':'25px','fontFamily':'Times New Roman'}
                            )

            )


        ],align = "center",
        # no_gutters = True
        ),
    href = '/'
    ),
    
                dbc.Row(
            [
        dbc.Col(
        # dbc.Button(id = 'button', children = "Click Me!", color = "primary"), 
            dbc.Button(id = 'button', children = "Support Us", color = "primary", className = 'ml-auto', href = '/')

            )        
    ],
            # add a top margin to make things look nice when the navbar
            # isn't expanded (mt-3) remove the margin on medium or
            # larger screens (mt-md-0) when the navbar is expanded.
            # keep button and search box on same row (flex-nowrap).
            # align everything on the right with left margin (ms-auto).
     className="g-0 ms-auto flex-nowrap mt-3 mt-md-0",
)
    # dbc.Button(id = 'button', children = "Support Us", color = "primary", className = 'ml-auto', href = '/')


    ])


info=data1["winner"].value_counts()

confirmed=info[0]
recovered=info[1]
deaths=info[2]


def data_for_cases(header, total_cases):
    card_content = [
        dbc.CardHeader(header),

        dbc.CardBody(
            [
               dcc.Markdown( dangerously_allow_html = True,
                   children = ["{0} <br><sub>".format(total_cases)])


                ]

            )
        ]

    return card_content


fig = go.Figure([go.Bar(x = df1['venue'], y = df1['key'], marker_color = 'indianred',name = 'India')])
fig.update_layout(title = 'Statium where done maximum match',
                      xaxis_title = 'Statium name',
                      yaxis_title = 'Number of matches', 
                       barmode = 'group'
                      )


labels = ['win', 'lose']
values = [win, lose]

fig1 = go.Figure(data=[go.Pie(labels=labels, values=values)])
fig1.update_layout(title = 'If you won the toss then how much chance to win the match')


body_app = dbc.Container([

    dbc.Row( html.Marquee("Mumbai Indians, Chennai Super Kings and Kolkata Knight Riders are top 3 teams who won maximum matches in 2008-2020"), style = {'color':'green'}),

    dbc.Row([
        dbc.Col(dbc.Card(data_for_cases("Mumbai Indians",f'{confirmed:,}' ), color = 'primary',style = {'text-align':'center'}, inverse = True),xs = 12, sm = 12, md = 4, lg = 4, xl = 4, style = {'padding':'12px 12px 12px 12px'}),
        dbc.Col(dbc.Card(data_for_cases("Chennai Super Kings",f'{recovered:,}'), color = 'success',style = {'text-align':'center'}, inverse = True),xs = 12, sm = 12, md = 4, lg = 4, xl = 4, style = {'padding':'12px 12px 12px 12px'}),
        dbc.Col(dbc.Card(data_for_cases("Kolkata Knight Riders",f'{deaths:,}' ), color = 'danger',style = {'text-align':'center'}, inverse = True),xs = 12, sm = 12, md = 4, lg = 4, xl = 4, style = {'padding':'12px 12px 12px 12px'})


        ]),

    
    dbc.Row([dbc.Col([dcc.Graph(figure = fig, style = {'height':'600px', 'width':'700px'}) ]),
             dbc.Col([dcc.Graph(figure = fig1, style = {'height':'600px', 'width':'500px'}) ])
             ]),
   


    dbc.Row([dbc.Col([html.Div(id = 'dropdown-div', children =
             [dcc.Dropdown(id="slct_year",
                 options=[{ 'label':i, 'value':i} for i in data1['year'].unique()],
                 multi=False,
                 value=2008,
                 style={'width': "100%"}
                 )], style = {'width':'100%', 'display':'inline-block','background':'blue'}),

                html.Div(id='output_container', children=[]),
                html.Br(),

                dcc.Graph(id='my_bee_map', figure={})],
                 ),
                 

             ]),    
    
    
    


    dbc.Row([dbc.Col([html.Div(id = 'dropdown-div1', children =
             [dcc.Dropdown(id="slct_year1",
                 options=[{ 'label':i, 'value':i} for i in sec_data['year'].unique()],
                 multi=False,
                 value=2008,
                 style={'width': "100%"}
                 )], style = {'width':'100%', 'display':'inline-block','background':'blue'}),],
                 ),
             
             
             
             
             dbc.Col([html.Div(id = 'dropdown-div3', children =
             [dcc.Dropdown(id="slct_year3",
                 options=[{ 'label':i, 'value':i} for i in sec_data['team1'].unique()],
                 multi=False,
                 value='Royal Challengers Bangalore',
                 style={'width': "100%"}
                 )], style = {'width':'100%', 'display':'inline-block','background':'blue'}),],
                 ),
             
             dbc.Col([html.Div(id = 'dropdown-div4', children =
             [dcc.Dropdown(id="slct_year4",
                 options=[{ 'label':i, 'value':i} for i in sec_data['team2'].unique()],
                 multi=False,
                 value='Kolkata Knight Riders',
                 style={'width': "100%"}
                 )], style = {'width':'100%', 'display':'inline-block','background':'blue'}),],
                 ),


             dcc.Graph(id='my_bee_map_1', figure={})
             ])    
    

    
    ])


app.layout = html.Div(id = 'parent', children = [navbar,body_app])

 



@app.callback([Output(component_id='output_container', component_property='children'),
    Output(component_id='my_bee_map', component_property='figure'),
    Output(component_id='my_bee_map_1', component_property='figure')],         
    [Input(component_id='slct_year', component_property='value'),
    Input(component_id='slct_year1', component_property='value'),
    Input(component_id='slct_year3', component_property='value'),
    Input(component_id='slct_year4', component_property='value')]
)
def xx(option_slctd, slct_ye1, slct_ye3, slct_ye4):
    
    
    
    container = "The year chosen by user was: {}".format(option_slctd)

    dff = data1.copy()
    dff = dff[dff["year"] == option_slctd]
    dff=dff.groupby("winner").count().reset_index()
    dff=dff[["winner","key"]].sort_values(by=['key'], ascending=False)
    fig3 = go.Figure([go.Bar(x = dff['winner'], y = dff['key'])])
    fig3.update_layout(title = 'Teams who won maximum matches',
                                      xaxis_title = 'Team names',
                                      yaxis_title = 'No of matches',
                                      )
        
    
    
    
    
    df = ccc.copy()
    zz=df[df["year"]==slct_ye1][df["team1"]==slct_ye3][df["team2"]==slct_ye4]
    zzz=zz.groupby('batsman',as_index=False).sum()
    zzz=zzz[['batsman','total_runs']]
    fig4 = go.Figure([go.Bar(x = zzz['batsman'], y = zzz['total_runs'])])
    fig4.update_layout(title = 'Teams who won maximum matches',
                                      xaxis_title = 'Team names',
                                      yaxis_title = 'No of matches',
                                      )
        
    return container, fig3, fig4

    
    



if __name__ == "__main__":
    app.run_server()

